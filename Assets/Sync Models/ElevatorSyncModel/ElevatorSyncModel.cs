using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class ElevatorSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _goUp;

    [RealtimeProperty(2, true, true)]
    private bool _goDown;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ElevatorSyncModel : RealtimeModel {
    public bool goUp {
        get {
            return _goUpProperty.value;
        }
        set {
            if (_goUpProperty.value == value) return;
            _goUpProperty.value = value;
            InvalidateReliableLength();
            FireGoUpDidChange(value);
        }
    }
    
    public bool goDown {
        get {
            return _goDownProperty.value;
        }
        set {
            if (_goDownProperty.value == value) return;
            _goDownProperty.value = value;
            InvalidateReliableLength();
            FireGoDownDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ElevatorSyncModel model, T value);
    public event PropertyChangedHandler<bool> goUpDidChange;
    public event PropertyChangedHandler<bool> goDownDidChange;
    
    public enum PropertyID : uint {
        GoUp = 1,
        GoDown = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _goUpProperty;
    
    private ReliableProperty<bool> _goDownProperty;
    
    #endregion
    
    public ElevatorSyncModel() : base(null) {
        _goUpProperty = new ReliableProperty<bool>(1, _goUp);
        _goDownProperty = new ReliableProperty<bool>(2, _goDown);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _goUpProperty.UnsubscribeCallback();
        _goDownProperty.UnsubscribeCallback();
    }
    
    private void FireGoUpDidChange(bool value) {
        try {
            goUpDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGoDownDidChange(bool value) {
        try {
            goDownDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _goUpProperty.WriteLength(context);
        length += _goDownProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _goUpProperty.Write(stream, context);
        writes |= _goDownProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.GoUp: {
                    changed = _goUpProperty.Read(stream, context);
                    if (changed) FireGoUpDidChange(goUp);
                    break;
                }
                case (uint) PropertyID.GoDown: {
                    changed = _goDownProperty.Read(stream, context);
                    if (changed) FireGoDownDidChange(goDown);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _goUp = goUp;
        _goDown = goDown;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
