using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerSyncModel {

    [RealtimeProperty(1, true, true)]
    private bool _isServer;

    [RealtimeProperty(2, true, true)]
    private bool _isReady;

    [RealtimeProperty(3, true, true)]
    private int _pathSequence;

    [RealtimeProperty(4, true, true)]
    private bool _backupBool;

    [RealtimeProperty(5, true, true)]
    private float _backupFloat;

    [RealtimeProperty(6, true, true)]
    private int _backupInt;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerSyncModel : RealtimeModel {
    public bool isServer {
        get {
            return _isServerProperty.value;
        }
        set {
            if (_isServerProperty.value == value) return;
            _isServerProperty.value = value;
            InvalidateReliableLength();
            FireIsServerDidChange(value);
        }
    }
    
    public bool isReady {
        get {
            return _isReadyProperty.value;
        }
        set {
            if (_isReadyProperty.value == value) return;
            _isReadyProperty.value = value;
            InvalidateReliableLength();
            FireIsReadyDidChange(value);
        }
    }
    
    public int pathSequence {
        get {
            return _pathSequenceProperty.value;
        }
        set {
            if (_pathSequenceProperty.value == value) return;
            _pathSequenceProperty.value = value;
            InvalidateReliableLength();
            FirePathSequenceDidChange(value);
        }
    }
    
    public bool backupBool {
        get {
            return _backupBoolProperty.value;
        }
        set {
            if (_backupBoolProperty.value == value) return;
            _backupBoolProperty.value = value;
            InvalidateReliableLength();
            FireBackupBoolDidChange(value);
        }
    }
    
    public float backupFloat {
        get {
            return _backupFloatProperty.value;
        }
        set {
            if (_backupFloatProperty.value == value) return;
            _backupFloatProperty.value = value;
            InvalidateReliableLength();
            FireBackupFloatDidChange(value);
        }
    }
    
    public int backupInt {
        get {
            return _backupIntProperty.value;
        }
        set {
            if (_backupIntProperty.value == value) return;
            _backupIntProperty.value = value;
            InvalidateReliableLength();
            FireBackupIntDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerSyncModel model, T value);
    public event PropertyChangedHandler<bool> isServerDidChange;
    public event PropertyChangedHandler<bool> isReadyDidChange;
    public event PropertyChangedHandler<int> pathSequenceDidChange;
    public event PropertyChangedHandler<bool> backupBoolDidChange;
    public event PropertyChangedHandler<float> backupFloatDidChange;
    public event PropertyChangedHandler<int> backupIntDidChange;
    
    public enum PropertyID : uint {
        IsServer = 1,
        IsReady = 2,
        PathSequence = 3,
        BackupBool = 4,
        BackupFloat = 5,
        BackupInt = 6,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isServerProperty;
    
    private ReliableProperty<bool> _isReadyProperty;
    
    private ReliableProperty<int> _pathSequenceProperty;
    
    private ReliableProperty<bool> _backupBoolProperty;
    
    private ReliableProperty<float> _backupFloatProperty;
    
    private ReliableProperty<int> _backupIntProperty;
    
    #endregion
    
    public PlayerSyncModel() : base(null) {
        _isServerProperty = new ReliableProperty<bool>(1, _isServer);
        _isReadyProperty = new ReliableProperty<bool>(2, _isReady);
        _pathSequenceProperty = new ReliableProperty<int>(3, _pathSequence);
        _backupBoolProperty = new ReliableProperty<bool>(4, _backupBool);
        _backupFloatProperty = new ReliableProperty<float>(5, _backupFloat);
        _backupIntProperty = new ReliableProperty<int>(6, _backupInt);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isServerProperty.UnsubscribeCallback();
        _isReadyProperty.UnsubscribeCallback();
        _pathSequenceProperty.UnsubscribeCallback();
        _backupBoolProperty.UnsubscribeCallback();
        _backupFloatProperty.UnsubscribeCallback();
        _backupIntProperty.UnsubscribeCallback();
    }
    
    private void FireIsServerDidChange(bool value) {
        try {
            isServerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsReadyDidChange(bool value) {
        try {
            isReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePathSequenceDidChange(int value) {
        try {
            pathSequenceDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupBoolDidChange(bool value) {
        try {
            backupBoolDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupFloatDidChange(float value) {
        try {
            backupFloatDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupIntDidChange(int value) {
        try {
            backupIntDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isServerProperty.WriteLength(context);
        length += _isReadyProperty.WriteLength(context);
        length += _pathSequenceProperty.WriteLength(context);
        length += _backupBoolProperty.WriteLength(context);
        length += _backupFloatProperty.WriteLength(context);
        length += _backupIntProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isServerProperty.Write(stream, context);
        writes |= _isReadyProperty.Write(stream, context);
        writes |= _pathSequenceProperty.Write(stream, context);
        writes |= _backupBoolProperty.Write(stream, context);
        writes |= _backupFloatProperty.Write(stream, context);
        writes |= _backupIntProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsServer: {
                    changed = _isServerProperty.Read(stream, context);
                    if (changed) FireIsServerDidChange(isServer);
                    break;
                }
                case (uint) PropertyID.IsReady: {
                    changed = _isReadyProperty.Read(stream, context);
                    if (changed) FireIsReadyDidChange(isReady);
                    break;
                }
                case (uint) PropertyID.PathSequence: {
                    changed = _pathSequenceProperty.Read(stream, context);
                    if (changed) FirePathSequenceDidChange(pathSequence);
                    break;
                }
                case (uint) PropertyID.BackupBool: {
                    changed = _backupBoolProperty.Read(stream, context);
                    if (changed) FireBackupBoolDidChange(backupBool);
                    break;
                }
                case (uint) PropertyID.BackupFloat: {
                    changed = _backupFloatProperty.Read(stream, context);
                    if (changed) FireBackupFloatDidChange(backupFloat);
                    break;
                }
                case (uint) PropertyID.BackupInt: {
                    changed = _backupIntProperty.Read(stream, context);
                    if (changed) FireBackupIntDidChange(backupInt);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isServer = isServer;
        _isReady = isReady;
        _pathSequence = pathSequence;
        _backupBool = backupBool;
        _backupFloat = backupFloat;
        _backupInt = backupInt;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
